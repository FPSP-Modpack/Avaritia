import java.util.concurrent.TimeUnit
import java.util.Properties
import groovy.util.ConfigSlurper

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gregtech forge mirror"
            url = "https://gregtech.overminddl1.com"
        }
        maven {
            name = "jitpack.io"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath("com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT") {
            changing = true
        }
    }
}

apply plugin: 'forge'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'signing'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.avaritia.version}"
group = "fox.spiteful.avaritia"
archivesBaseName = "Avaritia"

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}-${config.minecraft.version}"
    runDir = "eclipse"
    replace "@VERSION@", project.version
    replaceIn "Avaritia.java"
}

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
        setTransitive(false)
    }
    provided
    embedded
    compile.extendsFrom provided, embedded
}

repositories {
    maven {
        name = "Chickenbones Maven"
        url = "https://chickenbones.net/maven/"
    }
    maven {
        name = "Jared Maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "Player IC2 Maven"
        url = "https://maven.ic2.player.to/"
    }
    maven {
        name = "DVS1 Maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "MC Mod Dev Maven"
        url = "https://maven.mcmoddev.com/"
    }
    maven {
        name = "CurseForge Maven"
        url = "https://www.cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    ivy {
        name = "GTNH"
        artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision](-[classifier]).[ext]"
    }
}

dependencies {
    provided "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
    provided "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
    provided "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    provided "MineTweaker3:ZenScript:${config.minetweaker3.version}"
    provided "MineTweaker3:MineTweaker3-API:${config.minetweaker3.version}"
    provided "net.sengir.forestry:forestry_${config.minecraft.version}:${config.forestry.version}:dev"
    provided "mantle:Mantle:${config.minecraft.version}-${config.mantle.version}:deobf"
    provided "tconstruct:TConstruct:${config.minecraft.version}-${config.tconstruct.version}:deobf"
    provided "com.azanor:Baubles:${config.minecraft.version}-${config.baubles.version}"
    provided "com.azanor:Thaumcraft:${config.minecraft.version}-${config.thaumcraft.version}:deobf"
    provided "curse.maven:cofh-core-69162:${config.cofhcore.fileid}"
    provided ":BloodMagic:${config.minecraft.version}-${config.bloodmagic.version}:deobf"
    provided ":witchery:${config.minecraft.version}-${config.witchery.version}:deobf"
    compile fileTree(dir: 'libs', include: '*.jar')
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

deobfJar.dependsOn classes
assemble.dependsOn deobfJar

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}